Atividade 12
Respostas:

12. Elabore os comandos em um banco de dados MongoDB

b) Insira um documento na coleção aluno preechendo somente a coluna _id com o valor 1. Qual foi o resultado?

Resposta: 

db.aluno.insert({_id: 1})

WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})


c) Insira os seguintes documentos na coleção aluno.

_id        nome
1          JOSE
2          MARIA
3          BRUNO
4          CARLA
5          PEDRO

Resposta: 

db.aluno.insert({_id: 1, nome: "JOSE"})
WriteResult({ "nInserted" : 1 })
db.aluno.insert({_id: 2, nome: "MARIA"})
WriteResult({ "nInserted" : 1 })
db.aluno.insert({_id: 3, nome: "BRUNO"})
WriteResult({ "nInserted" : 1 })
db.aluno.insert({_id: 4, nome: "CARLA"})
WriteResult({ "nInserted" : 1 })
db.aluno.insert({_id: 5, nome: "PEDRO"})
WriteResult({ "nInserted" : 1 })

d) Insira um documento na coleção disciplina com os valores 1 para _id, BANCO DE DADOS I para nome e -1 para cargaHoraria. Qual foi o resultado?

Resposta:

db.disciplina.insert({_id: 1, nome: "BANCO DE DADOS I", cargaHoraria: NumberInt(-1)})
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

e) Insira os seguintes documentos na coleção disciplina.

_id              nome                cargaHoraria
1                BANCO DE DADOS I    60
2                BANCO DE DADOS II   60

Resposta:
db.disciplina.insert({_id: 1, nome: "BANCO DE DADOS I", cargaHoraria: NumberInt(60)})
WriteResult({ "nInserted" : 1 })
db.disciplina.insert({_id: 2, nome: "BANCO DE DADOS II", cargaHoraria: NumberInt(60)})
WriteResult({ "nInserted" : 1 })




f) Insira os seguintes documentos na coleção professor.
_id            nome
1              LETICIA
2              JOSE REGINALDO

Resposta:

db.professor.insert({_id: 1, nome: "LETICIA",titulacao: "graduada"})
WriteResult({ "nInserted" : 1 })
db.professor.insert({_id: 2, nome: "JOSE REGINALDO",titulacao: "pos graduado"})
WriteResult({ "nInserted" : 1 })




g) Insira um documento na coleção turma com os valores 1 para _id, 20192 para numPeriodo. Qual foi o resultado?
> db.turma.insert({_id: 1, numPeriodo: NumberInt(20192)})   
Resposta:
WriteResult({ "nInserted" : 1 })


h) Insira um documento na coleção turma com os valores 1 para _id, 20201 para numPeriodo. Qual foi o resultado?
db.turma.insert({_id: 1, numPeriodo: NumberInt(20201)})

Resposta:
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 11000,
                "errmsg" : "E11000 duplicate key error collection: academico.turma index: _id_ dup key: { _id: 1.0 }"
        }
})

i) Insira um documento na coleção turma com os valores 2 para _id, 20201 para numPeriodo e 3 para idProfessor. Qual foi o resultado?

Resposta:
WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})



j) Insira os documentos na coleção turma.

_id         numPeriodo   idProfessor  idDisciplina
3          20201         1             1
4          20202         2             2

Resposta:

WriteResult({ "nInserted" : 1 })
WriteResult({ "nInserted" : 1 })

Obs.: Para que funcionasse, foi necessário alterar a linha de código para: 

db.turma.insert({_id: 3, numPeriodo: NumberInt(20201), professor_id: 1, disciplina_id: 1})

e 

db.turma.insert({_id: 4, numPeriodo: NumberInt(20202), professor_id: 2, disciplina_id: 2})


k) Insira os registros na coleção historico.

_id             idTurma   idAluno
1               1          1
2               1          2
3               1          3
4               1          4
5               3          1
6               3          2
7               4          3
8               4          4

Resposta: 

WriteResult({
        "nInserted" : 0,
        "writeError" : {
                "code" : 121,
                "errmsg" : "Document failed validation"
        }
})

Foi encontrado o mesmo resultado para todos os id's


l) Altere o nome do aluno JOSE para JOAO.

Resposta: 
db.aluno.find({})
{ "_id" : 1, "nome" : "JOSE" }
{ "_id" : 2, "nome" : "MARIA" }
{ "_id" : 3, "nome" : "BRUNO" }
{ "_id" : 4, "nome" : "CARLA" }
{ "_id" : 5, "nome" : "PEDRO" }
db.aluno.update({_id: 1}, {nome: "JOAO"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })


m) Altere o _id de BANCO DE DADOS I para o valor 3. Qual foi o resultado?

Resposta: 

db.aluno.update({_id: 1}, {_id: 3})

WriteResult({
        "nMatched" : 0,
        "nUpserted" : 0,
        "nModified" : 0,
        "writeError" : {
                "code" : 66,
                "errmsg" : "After applying the update, the (immutable) field '_id' was found to have been altered to _id: 3.0"
        }
})

n) Altere a mediaFinal dos alunos que estão na turma de BANCO DE DADOS II para 5.

Resposta:


o) Exclua o aluno PEDRO. Qual foi o resultado?

Resposta:
db.aluno.find({})
{ "_id" : 1, "nome" : "JOAO" }
{ "_id" : 2, "nome" : "MARIA" }
{ "_id" : 3, "nome" : "BRUNO" }
{ "_id" : 4, "nome" : "CARLA" }
{ "_id" : 5, "nome" : "PEDRO" }

> db.aluno.remove({_id: 1,})

WriteResult({ "nRemoved" : 1 })

> db.aluno.find({})
{ "_id" : 2, "nome" : "MARIA" }
{ "_id" : 3, "nome" : "BRUNO" }
{ "_id" : 4, "nome" : "CARLA" }
{ "_id" : 5, "nome" : "PEDRO" }


p) Exclua a disciplina BANCO DE DADOS II. Qual foi o resultado?

Resposta: 

db.disciplina.find({})

{ "_id" : 1, "nome" : "BANCO DE DADOS I", "cargaHoraria" : 60 }
{ "_id" : 2, "nome" : "BANCO DE DADOS II", "cargaHoraria" : 60 }

> db.disciplina.remove({_id: 2})

WriteResult({ "nRemoved" : 1 })

> db.disciplina.find({})

{ "_id" : 1, "nome" : "BANCO DE DADOS I", "cargaHoraria" : 60 }

q) Exclua o professor JOSE REGINALDO. Qual foi o resultado?

Resposta:

 db.professor.find({})

{ "_id" : 1, "nome" : "LETICIA", "titulacao" : "graduada" }
{ "_id" : 2, "nome" : "JOSE REGINALDO", "titulacao" : "pos graduado" }
> db.professor.remove({_id: 2})

WriteResult({ "nRemoved" : 1 })

> db.professor.find({})

{ "_id" : 1, "nome" : "LETICIA", "titulacao" : "graduada" }
